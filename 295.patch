From 328be727c8bd6c5a625d2e6d2dbba81cef6ee36b Mon Sep 17 00:00:00 2001
From: Ganesh Murthy <gmurthy@redhat.com>
Date: Thu, 26 Apr 2018 10:44:57 -0400
Subject: [PATCH] DISPATCH-933 - Undo changes made because this JIRA.
 RouterStats os now gone relaced with the old Router entity. This change has
 been backed out because of backward compat issues

---
 include/qpid/dispatch/router_core.h                |  2 +-
 python/qpid_dispatch/management/qdrouter.json      | 30 ++----------
 python/qpid_dispatch_internal/management/agent.py  |  7 ---
 src/CMakeLists.txt                                 |  2 +-
 src/router_agent.c                                 |  5 +-
 src/router_core/agent.c                            | 18 +++----
 .../{agent_router_stats.c => agent_router.c}       |  9 ++--
 .../{agent_router_stats.h => agent_router.h}       |  4 +-
 src/router_core/management_agent.c                 |  6 +--
 tests/system_tests_autolinks.py                    |  6 +--
 tests/system_tests_distribution.py                 | 56 +++++++++++-----------
 tests/system_tests_link_routes.py                  |  4 +-
 tests/system_tests_management.py                   |  3 ++
 tests/system_tests_one_router.py                   | 42 ++--------------
 tests/system_tests_qdmanage.py                     |  6 +--
 tests/system_tests_two_routers.py                  |  2 +-
 tools/qdstat                                       |  2 +-
 17 files changed, 74 insertions(+), 130 deletions(-)
 rename src/router_core/{agent_router_stats.c => agent_router.c} (98%)
 rename src/router_core/{agent_router_stats.h => agent_router.h} (91%)

diff --git a/include/qpid/dispatch/router_core.h b/include/qpid/dispatch/router_core.h
index 4123fa30..8f144b0b 100644
--- a/include/qpid/dispatch/router_core.h
+++ b/include/qpid/dispatch/router_core.h
@@ -653,7 +653,7 @@ typedef enum {
     QD_ROUTER_CONFIG_LINK_ROUTE,
     QD_ROUTER_CONFIG_AUTO_LINK,
     QD_ROUTER_CONNECTION,
-    QD_ROUTER_ROUTER_STATS,
+    QD_ROUTER_ROUTER,
     QD_ROUTER_LINK,
     QD_ROUTER_ADDRESS,
     QD_ROUTER_EXCHANGE,
diff --git a/python/qpid_dispatch/management/qdrouter.json b/python/qpid_dispatch/management/qdrouter.json
index 1652603c..0a3e6df2 100644
--- a/python/qpid_dispatch/management/qdrouter.json
+++ b/python/qpid_dispatch/management/qdrouter.json
@@ -482,31 +482,7 @@
                     "create": true,
                     "required": false,
                     "default": "balanced"
-                }
-            }
-        },
-        
-        "routerStats": {
-            "description": "Overall router statistics.",
-            "extends": "operationalEntity",
-            "attributes": {
-	            "id": {
-	                "description":"Router's unique identity. The router will fail to start without id.",
-	                "type": "string",
-	                "required": false
-	            },
-	            "mode": {
-	                "type": [
-	                    "standalone",
-	                    "interior"
-	                ],
-	                "default": "standalone",
-	                "description": "In standalone mode, the router operates as a single component.  It does not participate in the routing protocol and therefore will not cooperate with other routers. In interior mode, the router operates in cooperation with other interior routers in an interconnected network."
-	            },
-	            "version": {
-	                "type": "string",
-	                "description": "Software Version"
-	            },
+                },
 	            "addrCount": {
 	                "type": "integer",
 	                "description":"Number of addresses known to the router.",
@@ -592,8 +568,8 @@
                     "description":"Number of deliveries that were sent to route container connections.",
                     "graph": true
                 }                
-            }        
-        },        
+            }
+        },       
         "sslProfile": {
             "description":"Attributes for setting TLS/SSL configuration for connections.",
             "referential": true,
diff --git a/python/qpid_dispatch_internal/management/agent.py b/python/qpid_dispatch_internal/management/agent.py
index 2d71bba3..88e828bf 100644
--- a/python/qpid_dispatch_internal/management/agent.py
+++ b/python/qpid_dispatch_internal/management/agent.py
@@ -479,13 +479,6 @@ def _identifier(self):
     def __str__(self):
         return super(LogStatsEntity, self).__str__().replace("Entity(", "LogStatsEntity(")
 
-class RouterStatsEntity(EntityAdapter):
-    def _identifier(self):
-        return self.attributes.get('identity')
-
-    def __str__(self):
-        return super(RouterStatsEntity, self).__str__().replace("Entity(", "RouterStatsEntity(")
-
 
 class AllocatorEntity(EntityAdapter):
     def _identifier(self):
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 453e8f30..ac85bca4 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -83,7 +83,7 @@ set(qpid_dispatch_SOURCES
   router_core/agent_connection.c
   router_core/agent_config_link_route.c
   router_core/agent_link.c
-  router_core/agent_router_stats.c
+  router_core/agent_router.c
   router_core/connections.c
   router_core/error.c
   router_core/exchange_bindings.c
diff --git a/src/router_agent.c b/src/router_agent.c
index 52d51336..4e02b77e 100644
--- a/src/router_agent.c
+++ b/src/router_agent.c
@@ -42,7 +42,10 @@ qd_error_t qd_entity_refresh_router(qd_entity_t* entity, void *impl) {
     qd_dispatch_t *qd = (qd_dispatch_t*) impl;
     qd_router_t *router = qd->router;
     if (qd_entity_set_string(entity, "area", router->router_area) == 0 &&
-        qd_entity_set_string(entity, "mode", qd_router_mode_name(router->router_mode)) == 0
+        qd_entity_set_string(entity, "mode", qd_router_mode_name(router->router_mode)) == 0 &&
+        qd_entity_set_long(entity, "addrCount", 0) == 0 &&
+        qd_entity_set_long(entity, "linkCount", 0) == 0 &&
+        qd_entity_set_long(entity, "nodeCount", 0) == 0
     )
         return QD_ERROR_NONE;
     return qd_error_code();
diff --git a/src/router_core/agent.c b/src/router_core/agent.c
index 84dda767..76cdcb33 100644
--- a/src/router_core/agent.c
+++ b/src/router_core/agent.c
@@ -27,7 +27,7 @@
 #include "router_core_private.h"
 #include "exchange_bindings.h"
 #include <stdio.h>
-#include "agent_router_stats.h"
+#include "agent_router.h"
 
 static void qdr_manage_read_CT(qdr_core_t *core, qdr_action_t *action, bool discard);
 static void qdr_manage_create_CT(qdr_core_t *core, qdr_action_t *action, bool discard);
@@ -189,7 +189,7 @@ qdr_query_t *qdr_manage_query(qdr_core_t              *core,
     case QD_ROUTER_CONFIG_ADDRESS:    qdr_agent_set_columns(query, attribute_names, qdr_config_address_columns, QDR_CONFIG_ADDRESS_COLUMN_COUNT);  break;
     case QD_ROUTER_CONFIG_LINK_ROUTE: qdr_agent_set_columns(query, attribute_names, qdr_config_link_route_columns, QDR_CONFIG_LINK_ROUTE_COLUMN_COUNT);  break;
     case QD_ROUTER_CONFIG_AUTO_LINK:  qdr_agent_set_columns(query, attribute_names, qdr_config_auto_link_columns, QDR_CONFIG_AUTO_LINK_COLUMN_COUNT);  break;
-    case QD_ROUTER_ROUTER_STATS:      qdr_agent_set_columns(query, attribute_names, qdr_router_columns, QDR_ROUTER_STATS_COLUMN_COUNT);  break;
+    case QD_ROUTER_ROUTER:            qdr_agent_set_columns(query, attribute_names, qdr_router_columns, QDR_ROUTER_COLUMN_COUNT);  break;
     case QD_ROUTER_CONNECTION:        qdr_agent_set_columns(query, attribute_names, qdr_connection_columns, QDR_CONNECTION_COLUMN_COUNT);  break;
     case QD_ROUTER_LINK:              qdr_agent_set_columns(query, attribute_names, qdr_link_columns, QDR_LINK_COLUMN_COUNT);  break;
     case QD_ROUTER_ADDRESS:           qdr_agent_set_columns(query, attribute_names, qdr_address_columns, QDR_ADDRESS_COLUMN_COUNT); break;
@@ -208,7 +208,7 @@ void qdr_query_add_attribute_names(qdr_query_t *query)
     case QD_ROUTER_CONFIG_ADDRESS:    qdr_agent_emit_columns(query, qdr_config_address_columns, QDR_CONFIG_ADDRESS_COLUMN_COUNT); break;
     case QD_ROUTER_CONFIG_LINK_ROUTE: qdr_agent_emit_columns(query, qdr_config_link_route_columns, QDR_CONFIG_LINK_ROUTE_COLUMN_COUNT); break;
     case QD_ROUTER_CONFIG_AUTO_LINK:  qdr_agent_emit_columns(query, qdr_config_auto_link_columns, QDR_CONFIG_AUTO_LINK_COLUMN_COUNT); break;
-    case QD_ROUTER_ROUTER_STATS:      qdr_agent_emit_columns(query, qdr_router_columns, QDR_ROUTER_STATS_COLUMN_COUNT); break;
+    case QD_ROUTER_ROUTER:            qdr_agent_emit_columns(query, qdr_router_columns, QDR_ROUTER_COLUMN_COUNT); break;
     case QD_ROUTER_CONNECTION:        qdr_agent_emit_columns(query, qdr_connection_columns, QDR_CONNECTION_COLUMN_COUNT); break;
     case QD_ROUTER_LINK:              qdr_agent_emit_columns(query, qdr_link_columns, QDR_LINK_COLUMN_COUNT); break;
     case QD_ROUTER_ADDRESS:           qdr_agent_emit_columns(query, qdr_address_columns, QDR_ADDRESS_COLUMN_COUNT); break;
@@ -349,7 +349,7 @@ static void qdr_manage_read_CT(qdr_core_t *core, qdr_action_t *action, bool disc
     case QD_ROUTER_CONFIG_ADDRESS:    qdra_config_address_get_CT(core, name, identity, query, qdr_config_address_columns); break;
     case QD_ROUTER_CONFIG_LINK_ROUTE: qdra_config_link_route_get_CT(core, name, identity, query, qdr_config_link_route_columns); break;
     case QD_ROUTER_CONFIG_AUTO_LINK:  qdra_config_auto_link_get_CT(core, name, identity, query, qdr_config_auto_link_columns); break;
-    case QD_ROUTER_ROUTER_STATS:      qdr_agent_forbidden(core, query, false); break;
+    case QD_ROUTER_ROUTER:      qdr_agent_forbidden(core, query, false); break;
     case QD_ROUTER_CONNECTION:        qdra_connection_get_CT(core, name, identity, query, qdr_connection_columns); break;
     case QD_ROUTER_LINK:              break;
     case QD_ROUTER_ADDRESS:           qdra_address_get_CT(core, name, identity, query, qdr_address_columns); break;
@@ -375,7 +375,7 @@ static void qdr_manage_create_CT(qdr_core_t *core, qdr_action_t *action, bool di
     case QD_ROUTER_CONFIG_LINK_ROUTE: qdra_config_link_route_create_CT(core, name, query, in_body); break;
     case QD_ROUTER_CONFIG_AUTO_LINK:  qdra_config_auto_link_create_CT(core, name, query, in_body); break;
     case QD_ROUTER_CONNECTION:        break;
-    case QD_ROUTER_ROUTER_STATS:      qdr_agent_forbidden(core, query, false); break;
+    case QD_ROUTER_ROUTER:            qdr_agent_forbidden(core, query, false); break;
     case QD_ROUTER_LINK:              break;
     case QD_ROUTER_ADDRESS:           break;
     case QD_ROUTER_FORBIDDEN:         qdr_agent_forbidden(core, query, false); break;
@@ -401,7 +401,7 @@ static void qdr_manage_delete_CT(qdr_core_t *core, qdr_action_t *action, bool di
     case QD_ROUTER_CONFIG_LINK_ROUTE: qdra_config_link_route_delete_CT(core, query, name, identity); break;
     case QD_ROUTER_CONFIG_AUTO_LINK:  qdra_config_auto_link_delete_CT(core, query, name, identity); break;
     case QD_ROUTER_CONNECTION:        break;
-    case QD_ROUTER_ROUTER_STATS:      qdr_agent_forbidden(core, query, false); break;
+    case QD_ROUTER_ROUTER:            qdr_agent_forbidden(core, query, false); break;
     case QD_ROUTER_LINK:              break;
     case QD_ROUTER_ADDRESS:           break;
     case QD_ROUTER_FORBIDDEN:         qdr_agent_forbidden(core, query, false); break;
@@ -425,7 +425,7 @@ static void qdr_manage_update_CT(qdr_core_t *core, qdr_action_t *action, bool di
     case QD_ROUTER_CONFIG_LINK_ROUTE: break;
     case QD_ROUTER_CONFIG_AUTO_LINK:  break;
     case QD_ROUTER_CONNECTION:        break;
-    case QD_ROUTER_ROUTER_STATS:      break;
+    case QD_ROUTER_ROUTER:            break;
     case QD_ROUTER_LINK:              qdra_link_update_CT(core, name, identity, query, in_body); break;
     case QD_ROUTER_ADDRESS:           break;
     case QD_ROUTER_FORBIDDEN:         qdr_agent_forbidden(core, query, false); break;
@@ -451,7 +451,7 @@ static void qdrh_query_get_first_CT(qdr_core_t *core, qdr_action_t *action, bool
         case QD_ROUTER_CONFIG_ADDRESS:    qdra_config_address_get_first_CT(core, query, offset); break;
         case QD_ROUTER_CONFIG_LINK_ROUTE: qdra_config_link_route_get_first_CT(core, query, offset); break;
         case QD_ROUTER_CONFIG_AUTO_LINK:  qdra_config_auto_link_get_first_CT(core, query, offset); break;
-        case QD_ROUTER_ROUTER_STATS:      qdra_router_get_first_CT(core, query, offset); break;
+        case QD_ROUTER_ROUTER:            qdra_router_get_first_CT(core, query, offset); break;
         case QD_ROUTER_CONNECTION:        qdra_connection_get_first_CT(core, query, offset); break;
         case QD_ROUTER_LINK:              qdra_link_get_first_CT(core, query, offset); break;
         case QD_ROUTER_ADDRESS:           qdra_address_get_first_CT(core, query, offset); break;
@@ -472,7 +472,7 @@ static void qdrh_query_get_next_CT(qdr_core_t *core, qdr_action_t *action, bool
         case QD_ROUTER_CONFIG_ADDRESS:    qdra_config_address_get_next_CT(core, query); break;
         case QD_ROUTER_CONFIG_LINK_ROUTE: qdra_config_link_route_get_next_CT(core, query); break;
         case QD_ROUTER_CONFIG_AUTO_LINK:  qdra_config_auto_link_get_next_CT(core, query); break;
-        case QD_ROUTER_ROUTER_STATS:      qdra_router_get_next_CT(core, query); break;
+        case QD_ROUTER_ROUTER:      qdra_router_get_next_CT(core, query); break;
         case QD_ROUTER_CONNECTION:        qdra_connection_get_next_CT(core, query); break;
         case QD_ROUTER_LINK:              qdra_link_get_next_CT(core, query); break;
         case QD_ROUTER_ADDRESS:           qdra_address_get_next_CT(core, query); break;
diff --git a/src/router_core/agent_router_stats.c b/src/router_core/agent_router.c
similarity index 98%
rename from src/router_core/agent_router_stats.c
rename to src/router_core/agent_router.c
index 53141a8b..b5690ff6 100644
--- a/src/router_core/agent_router_stats.c
+++ b/src/router_core/agent_router.c
@@ -17,7 +17,8 @@
  * under the License.
  */
 
-#include "agent_router_stats.h"
+#include "agent_router.h"
+
 #include "config.h"
 #include <inttypes.h>
 #include <stdio.h>
@@ -26,7 +27,7 @@
 #define QDR_ROUTER_NAME                                0
 #define QDR_ROUTER_IDENTITY                            1
 #define QDR_ROUTER_ID                                  2
-#define QDR_ROUTER_STATS_TYPE                          3
+#define QDR_ROUTER_TYPE                                3
 #define QDR_ROUTER_MODE                                4
 #define QDR_ROUTER_VERSION                             5
 #define QDR_ROUTER_ADDR_COUNT                          6
@@ -96,8 +97,8 @@ static void qdr_agent_write_column_CT(qd_composed_field_t *body, int col, qdr_co
         // There is only one instance of router. Just give it an identity of 1
         qd_compose_insert_string(body, "1");
         break;
-    case QDR_ROUTER_STATS_TYPE:
-        qd_compose_insert_string(body, "org.apache.qpid.dispatch.routerStats");
+    case QDR_ROUTER_TYPE:
+        qd_compose_insert_string(body, "org.apache.qpid.dispatch.router");
         break;
 
     case QDR_ROUTER_MODE:
diff --git a/src/router_core/agent_router_stats.h b/src/router_core/agent_router.h
similarity index 91%
rename from src/router_core/agent_router_stats.h
rename to src/router_core/agent_router.h
index 731403c1..b2738f31 100644
--- a/src/router_core/agent_router_stats.h
+++ b/src/router_core/agent_router.h
@@ -21,9 +21,9 @@
 
 #include "router_core_private.h"
 
-#define QDR_ROUTER_STATS_COLUMN_COUNT  23
+#define QDR_ROUTER_COLUMN_COUNT  23
 
-const char *qdr_router_columns[QDR_ROUTER_STATS_COLUMN_COUNT + 1];
+const char *qdr_router_columns[QDR_ROUTER_COLUMN_COUNT + 1];
 
 void qdra_router_get_first_CT(qdr_core_t *core, qdr_query_t *query, int offset);
 void qdra_router_get_next_CT(qdr_core_t *core, qdr_query_t *query);
diff --git a/src/router_core/management_agent.c b/src/router_core/management_agent.c
index 1ca848eb..60b6ee17 100644
--- a/src/router_core/management_agent.c
+++ b/src/router_core/management_agent.c
@@ -47,7 +47,7 @@ const unsigned char *auto_link_entity_type       = (unsigned char*) "org.apache.
 const unsigned char *address_entity_type         = (unsigned char*) "org.apache.qpid.dispatch.router.address";
 const unsigned char *link_entity_type            = (unsigned char*) "org.apache.qpid.dispatch.router.link";
 const unsigned char *console_entity_type         = (unsigned char*) "org.apache.qpid.dispatch.console";
-const unsigned char *router_stats_entity_type   = (unsigned char*) "org.apache.qpid.dispatch.routerStats";
+const unsigned char *router_entity_type          = (unsigned char*) "org.apache.qpid.dispatch.router";
 const unsigned char *connection_entity_type      = (unsigned char*) "org.apache.qpid.dispatch.connection";
 const unsigned char *config_exchange_entity_type = (unsigned char*) "org.apache.qpid.dispatch.router.config.exchange";
 const unsigned char *config_binding_entity_type  = (unsigned char*) "org.apache.qpid.dispatch.router.config.binding";
@@ -429,8 +429,8 @@ static bool qd_can_handle_request(qd_parsed_field_t           *properties_fld,
         *entity_type = QD_ROUTER_CONFIG_LINK_ROUTE;
     else if (qd_iterator_equal(qd_parse_raw(parsed_field), auto_link_entity_type))
         *entity_type = QD_ROUTER_CONFIG_AUTO_LINK;
-    else if (qd_iterator_equal(qd_parse_raw(parsed_field), router_stats_entity_type))
-        *entity_type = QD_ROUTER_ROUTER_STATS;
+    else if (qd_iterator_equal(qd_parse_raw(parsed_field), router_entity_type))
+        *entity_type = QD_ROUTER_ROUTER;
     else if (qd_iterator_equal(qd_parse_raw(parsed_field), console_entity_type))
         *entity_type = QD_ROUTER_FORBIDDEN;
     else if (qd_iterator_equal(qd_parse_raw(parsed_field), connection_entity_type))
diff --git a/tests/system_tests_autolinks.py b/tests/system_tests_autolinks.py
index 1feca3ab..16aeca4d 100644
--- a/tests/system_tests_autolinks.py
+++ b/tests/system_tests_autolinks.py
@@ -142,7 +142,7 @@ def test_03_autolink_sender(self):
         test.run()
         self.assertEqual(None, test.error)
 
-        long_type = 'org.apache.qpid.dispatch.routerStats'
+        long_type = 'org.apache.qpid.dispatch.router'
         query_command = 'QUERY --type=' + long_type
         output = json.loads(self.run_qdmanage(query_command))
         self.assertEqual(output[0]['deliveriesEgressRouteContainer'], 275)
@@ -161,7 +161,7 @@ def test_04_autolink_receiver(self):
         test.run()
         self.assertEqual(None, test.error)
 
-        long_type = 'org.apache.qpid.dispatch.routerStats'
+        long_type = 'org.apache.qpid.dispatch.router'
         query_command = 'QUERY --type=' + long_type
         output = json.loads(self.run_qdmanage(query_command))
         self.assertEqual(output[0]['deliveriesEgressRouteContainer'], 275)
@@ -383,7 +383,7 @@ def on_start(self, event):
         self.last_action = "Attached normal sender"
 
         local_node = Node.connect(self.normal_address, timeout=TIMEOUT)
-        res = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+        res = local_node.query(type='org.apache.qpid.dispatch.router')
         results = res.results[0]
         attribute_names = res.attribute_names
         if 8 == results[attribute_names.index('autoLinkCount')]:
diff --git a/tests/system_tests_distribution.py b/tests/system_tests_distribution.py
index 27f1a23b..f1ec3fe0 100644
--- a/tests/system_tests_distribution.py
+++ b/tests/system_tests_distribution.py
@@ -1762,8 +1762,8 @@ def on_start(self, event):
         self.timer = event.reactor.schedule(TIMEOUT, Timeout(self))
         self.send_conn = event.container.connect(self.send_addr)
         self.recv_conn = event.container.connect(self.recv_addr)
-        self.sender   = event.container.create_sender(self.send_conn, self.dest)
-        self.receiver = event.container.create_receiver(self.recv_conn, self.dest)
+        self.sender   = event.container.create_sender(self.send_conn, self.dest, name=link_name())
+        self.receiver = event.container.create_receiver(self.recv_conn, self.dest, name=link_name())
         self.receiver.flow(self.n_expected)
 
 
@@ -1842,7 +1842,7 @@ def on_start(self, event):
         self.timer     = event.reactor.schedule(TIMEOUT, Timeout(self))
         self.send_conn = event.container.connect(self.send_addr)
         self.recv_conn = event.container.connect(self.recv_addr)
-        self.sender    = event.container.create_sender(self.send_conn, options=DynamicTarget())
+        self.sender    = event.container.create_sender(self.send_conn, options=DynamicTarget(), name=link_name())
 
 
     def send(self):
@@ -1856,7 +1856,7 @@ def on_link_opened(self, event):
         if event.sender == self.sender:
             # Here we are told the address that we will use for the sender.
             self.address = self.sender.remote_target.address
-            self.receiver = event.container.create_receiver(self.recv_conn, self.address)
+            self.receiver = event.container.create_receiver(self.recv_conn, self.address, name=link_name())
 
 
     def on_sendable(self, event):
@@ -1924,11 +1924,11 @@ def on_start ( self, event ):
         self.client_connection = event.container.connect(self.client_addr)
         self.server_connection = event.container.connect(self.server_addr)
 
-        self.sender            = event.container.create_sender(self.client_connection, self.dest)
-        self.server_sender     = event.container.create_sender(self.server_connection, None)
+        self.sender            = event.container.create_sender(self.client_connection, self.dest, name=link_name())
+        self.server_sender     = event.container.create_sender(self.server_connection, None, name=link_name())
 
-        self.server_receiver   = event.container.create_receiver(self.server_connection, self.dest)
-        self.client_receiver   = event.container.create_receiver(self.client_connection, None, dynamic=True)
+        self.server_receiver   = event.container.create_receiver(self.server_connection, self.dest, name=link_name())
+        self.client_receiver   = event.container.create_receiver(self.client_connection, None, dynamic=True, name=link_name())
 
 
     def on_sendable(self, event):
@@ -2037,8 +2037,8 @@ def on_start(self, event):
         # I will get a remote_source address for it. I then pass that address to the
         # Address Checker object, which uses that as the reply-to address for the queries
         # that it sends.
-        self.linkroute_check_receiver = event.container.create_receiver(self.client_cnx, dynamic=True)
-        self.linkroute_check_sender   = event.container.create_sender(self.client_cnx, "$management")
+        self.linkroute_check_receiver = event.container.create_receiver(self.client_cnx, dynamic=True, name=link_name())
+        self.linkroute_check_sender   = event.container.create_sender(self.client_cnx, "$management", name=link_name())
 
 
     def on_link_opened ( self, event ) :
@@ -2062,7 +2062,7 @@ def on_message(self, event):
                 # Step 3: got confirmation of link-attach knowledge fully propagated
                 # to Nearside router.  Now we can make the client sender without getting
                 # a No Path To Destination error.
-                self.client_sender = event.container.create_sender(self.client_cnx, self.link_routable_address)
+                self.client_sender = event.container.create_sender(self.client_cnx, self.link_routable_address, name=link_name())
                 # And we can quit checking.
                 self.bail ( None )
             else:
@@ -2158,8 +2158,8 @@ def on_start(self, event):
         # I will get a remote_source address for it. I then pass that address to the
         # Address Checker object, which uses that as the reply-to address for the queries
         # that it sends.
-        self.linkroute_check_receiver = event.container.create_receiver(self.nearside_cnx, dynamic=True)
-        self.linkroute_check_sender   = event.container.create_sender(self.nearside_cnx, "$management")
+        self.linkroute_check_receiver = event.container.create_receiver(self.nearside_cnx, dynamic=True, name=link_name())
+        self.linkroute_check_sender   = event.container.create_sender(self.nearside_cnx, "$management", name=link_name())
 
 
     def on_link_opened(self, event):
@@ -2182,7 +2182,7 @@ def on_message(self, event):
                 # Step 3: got confirmation of link-attach knowledge fully propagated
                 # to Nearside router.  Now we can make the nearside sender without getting
                 # a No Path To Destination error.
-                self.nearside_sender = event.container.create_sender(self.nearside_cnx, self.link_routable_address)
+                self.nearside_sender = event.container.create_sender(self.nearside_cnx, self.link_routable_address, name=link_name())
                 # And we can quit checking.
                 if self.linkroute_check_timer:
                     self.linkroute_check_timer.cancel()
@@ -2345,8 +2345,8 @@ def on_start ( self, event ):
         self.recv_2_b.flow ( self.n_expected )
         self.recv_3_b.flow ( self.n_expected )
 
-        self.addr_check_receiver = event.container.create_receiver ( self.cnx_1, dynamic=True )
-        self.addr_check_sender   = event.container.create_sender ( self.cnx_1, "$management" )
+        self.addr_check_receiver = event.container.create_receiver ( self.cnx_1, dynamic=True, name=link_name() )
+        self.addr_check_sender   = event.container.create_sender ( self.cnx_1, "$management", name=link_name() )
 
 
     def on_link_opened(self, event):
@@ -2375,7 +2375,7 @@ def on_message ( self, event ):
                 # routers that know about the address. The network is ready.
                 # Now we can make the sender without getting a
                 # "No Path To Destination" error.
-                self.sender = event.container.create_sender ( self.send_cnx, self.dest )
+                self.sender = event.container.create_sender ( self.send_cnx, self.dest, name=link_name() )
 
                 # And we can quit checking.
                 if self.addr_check_timer:
@@ -2537,18 +2537,18 @@ def on_start ( self, event ):
         self.cnx_2    = event.container.connect ( self.router_2 )
         self.cnx_1    = event.container.connect ( self.router_1 )
 
-        self.recv_3  = event.container.create_receiver ( self.cnx_3,  self.dest )
+        self.recv_3  = event.container.create_receiver ( self.cnx_3,  self.dest, name=link_name() )
         if self.omit_middle_receiver is False :
-            self.recv_2 = event.container.create_receiver ( self.cnx_2,  self.dest )
-        self.recv_1  = event.container.create_receiver ( self.cnx_1,  self.dest )
+            self.recv_2 = event.container.create_receiver ( self.cnx_2,  self.dest, name=link_name() )
+        self.recv_1  = event.container.create_receiver ( self.cnx_1,  self.dest, name=link_name() )
 
         self.recv_3.flow ( self.total_messages )
         if self.omit_middle_receiver is False :
             self.recv_2.flow ( self.total_messages )
         self.recv_1.flow ( self.total_messages )
 
-        self.address_check_receiver = event.container.create_receiver ( self.cnx_1, dynamic=True )
-        self.address_check_sender   = event.container.create_sender   ( self.cnx_1, "$management" )
+        self.address_check_receiver = event.container.create_receiver ( self.cnx_1, dynamic=True , name=link_name())
+        self.address_check_sender   = event.container.create_sender   ( self.cnx_1, "$management", name=link_name() )
 
 
     def on_link_opened(self, event):
@@ -2578,7 +2578,7 @@ def on_message ( self, event ):
                 # Since I have 3 nodes, I want to see 1 subscriber (which is on the local router) and
                 # 2 remote routers that know about my destination address.
                 # Now we can safely make the payload sender without getting a 'No Path To Destination' error.
-                self.payload_sender = event.container.create_sender ( self.cnx_1, self.dest )
+                self.payload_sender = event.container.create_sender ( self.cnx_1, self.dest, name=link_name() )
                 # And we can quit checking.
                 if self.address_check_timer:
                     self.address_check_timer.cancel()
@@ -2721,8 +2721,8 @@ def on_start ( self, event ):
         self.recv_2_b.flow ( self.n_to_send )
         self.recv_3_b.flow ( self.n_to_send )
 
-        self.addr_check_receiver = event.container.create_receiver ( self.cnx_1, dynamic=True )
-        self.addr_check_sender   = event.container.create_sender ( self.cnx_1, "$management" )
+        self.addr_check_receiver = event.container.create_receiver ( self.cnx_1, dynamic=True, name=link_name() )
+        self.addr_check_sender   = event.container.create_sender ( self.cnx_1, "$management", name=link_name() )
 
 
     def on_link_opened(self, event):
@@ -2757,7 +2757,7 @@ def on_message ( self, event ):
                 # routers that know about the address. The network is ready.
                 # Now we can make the sender without getting a
                 # "No Path To Destination" error.
-                self.sender = event.container.create_sender ( self.send_cnx, self.dest )
+                self.sender = event.container.create_sender ( self.send_cnx, self.dest, name=link_name() )
 
                 # And we can quit checking.
                 if self.addr_check_timer:
@@ -2991,8 +2991,8 @@ def on_start ( self, event ):
         #          dynamic.  That means that when we receive the on_link_opened event for
         #          it, we will be handed its address -- which we will then use as the reply-to
         #          address for the management queries we send.
-        self.linkroute_check_receiver = event.container.create_receiver ( self.sender_cnx, dynamic=True )
-        self.linkroute_check_sender   = event.container.create_sender   ( self.sender_cnx, "$management" )
+        self.linkroute_check_receiver = event.container.create_receiver ( self.sender_cnx, dynamic=True, name=link_name() )
+        self.linkroute_check_sender   = event.container.create_sender   ( self.sender_cnx, "$management", name=link_name() )
 
 
     #=================================================
diff --git a/tests/system_tests_link_routes.py b/tests/system_tests_link_routes.py
index 3c737c3a..6134c0fa 100644
--- a/tests/system_tests_link_routes.py
+++ b/tests/system_tests_link_routes.py
@@ -579,7 +579,7 @@ def test_zzz_qdmanage_delete_link_route(self):
         """
 
         local_node = Node.connect(self.routers[1].addresses[0], timeout=TIMEOUT)
-        res = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+        res = local_node.query(type='org.apache.qpid.dispatch.router')
         results = res.results[0]
         attribute_list = res.attribute_names
 
@@ -617,7 +617,7 @@ def test_zzz_qdmanage_delete_link_route(self):
         out = self.run_qdmanage(cmd=cmd, address=addr)
         self.assertEquals(out.rstrip(), '[]')
 
-        res = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+        res = local_node.query(type='org.apache.qpid.dispatch.router')
         results = res.results[0]
         attribute_list = res.attribute_names
         self.assertEqual(results[attribute_list.index('linkRouteCount')], 0)
diff --git a/tests/system_tests_management.py b/tests/system_tests_management.py
index 253724f8..c3490028 100644
--- a/tests/system_tests_management.py
+++ b/tests/system_tests_management.py
@@ -356,6 +356,9 @@ def test_router(self):
         entities = self.node.query().get_entities()
         routers = [e for e in entities if e.type == ROUTER]
         self.assertEqual(1, len(routers))
+        router = routers[0]
+        self.assertEqual(router.linkCount, len([e for e in entities if e.type == LINK]))
+        self.assertEqual(router.addrCount, len([e for e in entities if e.type == ADDRESS]))
 
     def test_router_node(self):
         """Test node entity in a trio of linked routers"""
diff --git a/tests/system_tests_one_router.py b/tests/system_tests_one_router.py
index 6dd0de4b..22a9d36d 100644
--- a/tests/system_tests_one_router.py
+++ b/tests/system_tests_one_router.py
@@ -336,38 +336,6 @@ def test_35_reject_disposition(self):
         self.assertTrue(test.received_error)
         self.assertTrue(test.reject_count_match)
 
-    def test_36_query_router(self):
-        """
-        Query the router with type='org.apache.qpid.dispatch.router' and make sure everything matches up as expected.
-        """
-        local_node = Node.connect(self.address, timeout=TIMEOUT)
-        outs = local_node.query(type='org.apache.qpid.dispatch.router')
-        debug_dump = outs.attribute_names.index('debugDumpFile')
-        ra_interval_flux = outs.attribute_names.index('raIntervalFluxSeconds')
-        worker_threads = outs.attribute_names.index('workerThreads')
-        name = outs.attribute_names.index('name')
-        hello_interbval = outs.attribute_names.index('helloIntervalSeconds')
-        area = outs.attribute_names.index('area')
-        hello_max_age = outs.attribute_names.index('helloMaxAgeSeconds')
-        sasl_config_name = outs.attribute_names.index('saslConfigName')
-        remote_ls_max_age = outs.attribute_names.index('remoteLsMaxAgeSeconds')
-        default_distribution = outs.attribute_names.index('defaultDistribution')
-        ra_interval = outs.attribute_names.index('raIntervalSeconds')
-        mode = outs.attribute_names.index('mode')
-
-        self.assertEqual(outs.results[0][debug_dump], 'qddebug.txt')
-        self.assertEqual(outs.results[0][ra_interval_flux], 4)
-        self.assertEqual(outs.results[0][worker_threads], 4)
-        self.assertEqual(outs.results[0][name], 'router/QDR')
-        self.assertEqual(outs.results[0][hello_interbval], 1)
-        self.assertEqual(outs.results[0][area], '0')
-        self.assertEqual(outs.results[0][hello_max_age], 3)
-        self.assertEqual(outs.results[0][sasl_config_name], 'qdrouterd')
-        self.assertEqual(outs.results[0][remote_ls_max_age], 60)
-        self.assertEqual(outs.results[0][default_distribution], 'balanced')
-        self.assertEqual(outs.results[0][ra_interval], 30)
-        self.assertEqual(outs.results[0][mode], 'standalone')
-
     def test_37_connection_properties_unicode_string(self):
         """
         Tests connection property that is a map of unicode strings and integers
@@ -2342,7 +2310,7 @@ def check_if_done(self):
                         if result[16] != 250:
                             self.error = "Expected 250 dropped presettled deliveries but got " + str(result[16])
                         else:
-                            outs = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+                            outs = local_node.query(type='org.apache.qpid.dispatch.router')
                             pos = outs.attribute_names.index("droppedPresettledDeliveries")
                             results = outs.results[0]
                             if results[pos] != 250:
@@ -2397,7 +2365,7 @@ def __init__(self, address):
 
     def get_modified_deliveries ( self ) :
         local_node = Node.connect(self.address, timeout=TIMEOUT)
-        outs = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+        outs = local_node.query(type='org.apache.qpid.dispatch.router')
         pos = outs.attribute_names.index("modifiedDeliveries")
         results = outs.results[0]
         n_modified_deliveries = results [ pos ]
@@ -2522,7 +2490,7 @@ def __init__(self, address):
     def check_if_done(self):
         if self.n_settled == self.count:
             local_node = Node.connect(self.address, timeout=TIMEOUT)
-            outs = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+            outs = local_node.query(type='org.apache.qpid.dispatch.router')
             pos = outs.attribute_names.index("acceptedDeliveries")
             results = outs.results[0]
             if results >= self.count:
@@ -2672,7 +2640,7 @@ def on_message(self, event):
                         if result[16] != 250:
                             self.error = "Expected 250 dropped presettled deliveries but got " + str(result[16])
                         else:
-                            outs = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+                            outs = local_node.query(type='org.apache.qpid.dispatch.router')
                             pos_presett = outs.attribute_names.index("presettledDeliveries")
                             pos = outs.attribute_names.index("droppedPresettledDeliveries")
                             results = outs.results[0]
@@ -2705,7 +2673,7 @@ def __init__(self, address):
 
     def count_rejects ( self ) :
         local_node = Node.connect(self.address, timeout=TIMEOUT)
-        outs = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+        outs = local_node.query(type='org.apache.qpid.dispatch.router')
         pos = outs.attribute_names.index("rejectedDeliveries")
         results = outs.results[0]
         return results[pos]
diff --git a/tests/system_tests_qdmanage.py b/tests/system_tests_qdmanage.py
index b54b4870..febd6cbe 100644
--- a/tests/system_tests_qdmanage.py
+++ b/tests/system_tests_qdmanage.py
@@ -177,7 +177,7 @@ def test_get_annotations(self):
 
     def test_get_types(self):
         out = json.loads(self.run_qdmanage("get-types"))
-        self.assertEqual(len(out), 29)
+        self.assertEqual(len(out), 28)
 
     def test_get_attributes(self):
         out = json.loads(self.run_qdmanage("get-attributes"))
@@ -185,11 +185,11 @@ def test_get_attributes(self):
 
     def test_get_attributes(self):
         out = json.loads(self.run_qdmanage("get-attributes"))
-        self.assertEqual(len(out), 29)
+        self.assertEqual(len(out), 28)
 
     def test_get_operations(self):
         out = json.loads(self.run_qdmanage("get-operations"))
-        self.assertEqual(len(out), 29)
+        self.assertEqual(len(out), 28)
         self.assertEqual(out['org.apache.qpid.dispatch.sslProfile'], [u'CREATE', u'DELETE', u'READ'])
 
     def test_get_types_with_ssl_profile_type(self):
diff --git a/tests/system_tests_two_routers.py b/tests/system_tests_two_routers.py
index 9dcfe0d0..83902fec 100644
--- a/tests/system_tests_two_routers.py
+++ b/tests/system_tests_two_routers.py
@@ -105,7 +105,7 @@ def test_01_pre_settled(self):
         self.assertEqual(None, test.error)
 
         local_node = Node.connect(self.routers[0].addresses[0], timeout=TIMEOUT)
-        outs = local_node.query(type='org.apache.qpid.dispatch.routerStats')
+        outs = local_node.query(type='org.apache.qpid.dispatch.router')
 
         # deliveriesTransit must most surely be greater than num_msgs
         pos = outs.attribute_names.index("deliveriesTransit")
diff --git a/tools/qdstat b/tools/qdstat
index e4c486af..f385b858 100755
--- a/tools/qdstat
+++ b/tools/qdstat
@@ -229,7 +229,7 @@ class BusManager(Node):
         heads.append(Header("value"))
         rows = []
 
-        objects = self.query('org.apache.qpid.dispatch.routerStats')
+        objects = self.query('org.apache.qpid.dispatch.router')
 
         router = objects[0]
         rows.append(('Version',       router.version))
